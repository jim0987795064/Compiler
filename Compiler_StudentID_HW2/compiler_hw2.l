/* Definition section */
%{
    #include "common.h"
    #include "y.tab.h"	/* header file generated by bison */
    extern YYSTYPE yylval;

    #define YY_NO_UNPUT
    #define YY_NO_INPUT
%}


/* Define regular expression label */
letter  [a-zA-Z_]
digit [0-9]
id {letter}+({letter}|{digit})*
inumber {digit}+
fnumber ({digit}*\.{digit}+)
newline		[\n]

%x CMT
%x STR
%option yylineno

/* Rules section */
%%

"/*"        { BEGIN(CMT); }
<CMT>"*/"   { BEGIN(INITIAL); }
<CMT>\n     {;}
<CMT>.      {;}
"//".*      {;}
"\""        { BEGIN(STR);
                return '"';
            }
<STR>"\""   { BEGIN(INITIAL);
                return '"';
            }
<STR>[^\"]* { yylval.s_val = strdup(yytext);
                return STRING_LIT;
            }
"+"         {   yylval.s_val = "ADD";
                return ADD;}
"-"         {   yylval.s_val = "SUB";
                return SUB;}
"*"         {   yylval.s_val = "MUL";
                return MUL;}
"/"         {   yylval.s_val = "QUO";
                return QUO;}
"%"         {   yylval.s_val = "REM";
                return REM;}
"++"        {   yylval.s_val = "INC";
                return INC;}
"--"        {   yylval.s_val = "DEC";
                return DEC;}

">"         {   yylval.s_val = "GTR";
                return GTR;}

"||"        { yylval.s_val = "OR";
                return OR;}

"!"         { yylval.s_val = "NOT";
                return NOT;}

"true"      { yylval.s_val = "TRUE";
                return TRUE;}

"false"     { yylval.s_val = "FALSE";
                return FALSE;}

"&&"        { yylval.s_val = "AND";
                return AND;}

\+[0-9]+  {   yylval.i_val = atoi(yytext+1);
                return POS;}

-[0-9]+   { yylval.i_val = -atoi(yytext+1); 
                return NEG; }

"int"        { yylval.s_val = "int";
                return INT;}

"print"     {   yylval.s_val = "PRINT";
                return PRINT; }

"("         {   yylval.s_val = "LPAREN";
                return LPAREN;}
 
")"         {   yylval.s_val = "RPAREN";
                return RPAREN;}

{inumber}   { yylval.i_val = atoi(yytext);
                return INT_LIT;
            }

{id}        { yylval.ctr.id_name = strdup(yytext);
                return IDENT;
            }
[;]         { return SEMICOLON; }
[\n]        {;}
<<EOF>>     { static int once = 0;
                if (once++) {
                    yyterminate();
                }
            }
[ \t]+      {;}
.           {;}
%%
/*  C Code section */
int yywrap(void)
{
    return 1;
}

